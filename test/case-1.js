"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assert = require("assert");
const index_1 = require("../index");
const isNumber = (object) => (object => { return typeof object === "number"; })(object);
assert.strictEqual(isNumber(0), true);
assert.strictEqual(isNumber(1), true);
assert.strictEqual(isNumber(42), true);
assert.strictEqual(isNumber(-1), true);
assert.strictEqual(isNumber('0'), false);
assert.strictEqual(isNumber('1'), false);
assert.strictEqual(isNumber('42'), false);
assert.strictEqual(isNumber('-1'), false);
assert.strictEqual((object => { return typeof object === "object" && object !== null && object["type"] === "cool" && (typeof object["secondItem"] === "object" && object["secondItem"] !== null && typeof object["secondItem"]["item"] === "number") && (typeof object["thirdItem"] === "object" && object["thirdItem"] !== null && (typeof object["thirdItem"]["item"] === "object" && object["thirdItem"]["item"] !== null && typeof object["thirdItem"]["item"]["item"] === "boolean")) && typeof object["item"] === "string" && typeof object["buz"] === "number"; })({}), false);
assert.strictEqual((object => { return typeof object === "object" && object !== null && object["type"] === "cool" && (typeof object["secondItem"] === "object" && object["secondItem"] !== null && typeof object["secondItem"]["item"] === "number") && (typeof object["thirdItem"] === "object" && object["thirdItem"] !== null && (typeof object["thirdItem"]["item"] === "object" && object["thirdItem"]["item"] !== null && typeof object["thirdItem"]["item"]["item"] === "boolean")) && typeof object["item"] === "string" && typeof object["buz"] === "number"; })({ type: {}, secondItem: {}, thirdItem: {} }), false);
assert.strictEqual((object => { return typeof object === "object" && object !== null && object["type"] === "cool" && (typeof object["secondItem"] === "object" && object["secondItem"] !== null && typeof object["secondItem"]["item"] === "number") && (typeof object["thirdItem"] === "object" && object["thirdItem"] !== null && (typeof object["thirdItem"]["item"] === "object" && object["thirdItem"]["item"] !== null && typeof object["thirdItem"]["item"]["item"] === "boolean")) && typeof object["item"] === "string" && typeof object["buz"] === "number"; })({ item: 'string', buz: 1, type: 'cool', secondItem: { item: 2 }, thirdItem: { item: { item: true } } }), true);
assert.strictEqual((object => { return typeof object === "object" && object !== null && object["type"] === "cool" && (typeof object["secondItem"] === "object" && object["secondItem"] !== null && typeof object["secondItem"]["item"] === "number") && (typeof object["thirdItem"] === "object" && object["thirdItem"] !== null && (typeof object["thirdItem"]["item"] === "object" && object["thirdItem"]["item"] !== null && typeof object["thirdItem"]["item"]["item"] === "boolean")) && typeof object["item"] === "string" && typeof object["buz"] === "number"; })({ item: 'text', buz: 2, type: 'cool', secondItem: { item: 3 }, thirdItem: { item: { item: false } } }), true);
assert.strictEqual((object => { return typeof object === "boolean"; })(0), false);
assert.strictEqual((object => { return typeof object === "boolean"; })(1), false);
assert.strictEqual((object => { return typeof object === "boolean"; })('true'), false);
assert.strictEqual((object => { return typeof object === "boolean"; })('false'), false);
assert.strictEqual((object => { return typeof object === "boolean"; })(true), true);
assert.strictEqual((object => { return typeof object === "boolean"; })(false), true);
